<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;

class SecurityAudit extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'adminforge:security-audit {--fix : Automatically fix some issues}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Audit the repository for security issues and sensitive data leaks';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üîç Audit de s√©curit√© AdminForge...');
        $this->newLine();

        $issues = 0;
        $warnings = 0;
        $fixed = 0;

        // 1. V√©rifier les fichiers .gitignore
        $issues += $this->checkGitignoreFiles();

        // 2. Rechercher des cl√©s API dans les fichiers
        $issues += $this->scanForApiKeys();

        // 3. V√©rifier les permissions des fichiers
        $warnings += $this->checkFilePermissions();

        // 4. V√©rifier la configuration
        $issues += $this->checkConfiguration();

        // 5. V√©rifier les variables d'environnement
        $warnings += $this->checkEnvironmentVariables();

        $this->newLine();
        $this->info('üìä R√©sum√© de l\'audit:');
        $this->info("   ‚Ä¢ Probl√®mes critiques: {$issues}");
        $this->info("   ‚Ä¢ Avertissements: {$warnings}");

        if ($this->option('fix')) {
            $this->info("   ‚Ä¢ Corrections automatiques: {$fixed}");
        }

        if ($issues > 0) {
            $this->error('‚ùå Des probl√®mes de s√©curit√© ont √©t√© d√©tect√©s!');
            return 1;
        } elseif ($warnings > 0) {
            $this->warn('‚ö†Ô∏è  Des avertissements ont √©t√© √©mis.');
            return 0;
        } else {
            $this->info('‚úÖ Aucun probl√®me de s√©curit√© d√©tect√©!');
            return 0;
        }
    }

    private function checkGitignoreFiles(): int
    {
        $this->info('üîç V√©rification des fichiers .gitignore...');
        $issues = 0;

        $requiredGitignores = [
            '.gitignore',
            'storage/.gitignore',
            'storage/app/.gitignore',
            'storage/logs/.gitignore',
            'config/.gitignore',
            'database/.gitignore',
        ];

        foreach ($requiredGitignores as $gitignore) {
            if (!File::exists($gitignore)) {
                $this->error("‚ùå Fichier manquant: {$gitignore}");
                $issues++;
            } else {
                $this->line("‚úÖ Pr√©sent: {$gitignore}");
            }
        }

        return $issues;
    }

    private function scanForApiKeys(): int
    {
        $this->info('üîç Recherche de cl√©s API dans les fichiers...');
        $issues = 0;

        $sensitivePatterns = [
            'sk-[a-zA-Z0-9]{20,}' => 'Cl√© OpenAI',
            'api_key.*=.*[\'"][^\'"\s]{20,}[\'"]' => 'Cl√© API g√©n√©rique',
            'secret.*=.*[\'"][^\'"\s]{20,}[\'"]' => 'Secret',
            'token.*=.*[\'"][^\'"\s]{20,}[\'"]' => 'Token',
        ];

        $excludeDirs = ['vendor', 'node_modules', '.git', 'storage/logs'];
        $includeExtensions = ['php', 'js', 'env', 'json', 'yaml', 'yml'];

        foreach ($sensitivePatterns as $pattern => $description) {
            $command = "grep -r -E '{$pattern}' . " .
                      "--include='*.{" . implode(',', $includeExtensions) . "}' " .
                      implode(' ', array_map(fn($dir) => "--exclude-dir={$dir}", $excludeDirs)) .
                      " 2>/dev/null || true";

            $output = shell_exec($command);

            if (!empty(trim($output))) {
                $this->error("‚ùå {$description} d√©tect√©e:");
                $lines = explode("\n", trim($output));
                foreach (array_slice($lines, 0, 5) as $line) {
                    $this->line("   {$line}");
                }
                if (count($lines) > 5) {
                    $this->line("   ... et " . (count($lines) - 5) . " autres occurrences");
                }
                $issues++;
            }
        }

        if ($issues === 0) {
            $this->line('‚úÖ Aucune cl√© API d√©tect√©e dans les fichiers');
        }

        return $issues;
    }

    private function checkFilePermissions(): int
    {
        $this->info('üîç V√©rification des permissions des fichiers...');
        $warnings = 0;

        $sensitiveFiles = [
            '.env' => '600',
            'storage' => '755',
            'bootstrap/cache' => '755',
        ];

        foreach ($sensitiveFiles as $file => $expectedPerm) {
            if (File::exists($file)) {
                $actualPerm = substr(sprintf('%o', fileperms($file)), -3);
                if ($actualPerm !== $expectedPerm) {
                    $this->warn("‚ö†Ô∏è  {$file}: permissions {$actualPerm} (recommand√©: {$expectedPerm})");
                    $warnings++;
                } else {
                    $this->line("‚úÖ {$file}: permissions correctes ({$actualPerm})");
                }
            }
        }

        return $warnings;
    }

    private function checkConfiguration(): int
    {
        $this->info('üîç V√©rification de la configuration...');
        $issues = 0;

        // V√©rifier que les cl√©s ne sont pas dans les fichiers de config
        $configFiles = ['config/adminforge.php', 'config/services.php'];

        foreach ($configFiles as $configFile) {
            if (File::exists($configFile)) {
                $content = File::get($configFile);
                if (preg_match('/[\'"]api_key[\'"][\s]*=>[\s]*[\'"]sk-[a-zA-Z0-9]+[\'"]/', $content)) {
                    $this->error("‚ùå Cl√© API d√©tect√©e dans {$configFile}");
                    $issues++;
                } else {
                    $this->line("‚úÖ {$configFile}: pas de cl√© API en dur");
                }
            }
        }

        return $issues;
    }

    private function checkEnvironmentVariables(): int
    {
        $this->info('üîç V√©rification des variables d\'environnement...');
        $warnings = 0;

        $requiredEnvVars = ['APP_KEY', 'DB_PASSWORD'];
        $sensitiveEnvVars = ['OPENAI_API_KEY', 'API_KEY'];

        foreach ($requiredEnvVars as $var) {
            if (empty(env($var))) {
                $this->warn("‚ö†Ô∏è  Variable d'environnement manquante: {$var}");
                $warnings++;
            }
        }

        foreach ($sensitiveEnvVars as $var) {
            if (!empty(env($var))) {
                $this->warn("‚ö†Ô∏è  Variable d'environnement sensible d√©tect√©e: {$var} (utilisez plut√¥t la base de donn√©es)");
                $warnings++;
            }
        }

        return $warnings;
    }
}
